$version Generated by VerilatedVcd $end
$date Fri May  9 02:16:36 2025
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 X ACLK $end
  $var wire  1 Y ARESETN $end
  $var wire 32 ^ R_data [31:0] $end
  $var wire 32 ] W_data [31:0] $end
  $var wire 32 \ address [31:0] $end
  $var wire  1 Z read_s $end
  $var wire  1 [ write_s $end
  $scope module axi4_lite_top $end
   $var wire  1 X ACLK $end
   $var wire 32 b ADDRESS [31:0] $end
   $var wire  1 Y ARESETN $end
   $var wire 32 b DATA_WIDTH [31:0] $end
   $var wire 32 _ M_ARADDR [31:0] $end
   $var wire  1 # M_ARREADY $end
   $var wire  1 % M_ARVALID $end
   $var wire 32 ` M_AWADDR [31:0] $end
   $var wire  1 ) M_AWVALID $end
   $var wire  1 * M_BREADY $end
   $var wire  1 & M_RREADY $end
   $var wire 32 a M_WDATA [31:0] $end
   $var wire  4 , M_WSTRB [3:0] $end
   $var wire  1 ) M_WVALID $end
   $var wire 32 ^ R_data [31:0] $end
   $var wire  1 ' S_AWREADY $end
   $var wire  2 c S_BRESP [1:0] $end
   $var wire  1 ( S_BVALID $end
   $var wire 32 + S_RDATA [31:0] $end
   $var wire  2 - S_RRESP [1:0] $end
   $var wire  1 $ S_RVALID $end
   $var wire  1 ' S_WREADY $end
   $var wire 32 ] W_data [31:0] $end
   $var wire 32 \ address [31:0] $end
   $var wire  1 Z read_s $end
   $var wire  1 [ write_s $end
   $scope module u_axi4_lite_master0 $end
    $var wire  1 X ACLK $end
    $var wire 32 b ADDRESS [31:0] $end
    $var wire  1 Y ARESETN $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire 32 _ M_ARADDR [31:0] $end
    $var wire  1 # M_ARREADY $end
    $var wire  1 % M_ARVALID $end
    $var wire 32 ` M_AWADDR [31:0] $end
    $var wire  1 ' M_AWREADY $end
    $var wire  1 ) M_AWVALID $end
    $var wire  1 * M_BREADY $end
    $var wire  2 c M_BRESP [1:0] $end
    $var wire  1 ( M_BVALID $end
    $var wire 32 + M_RDATA [31:0] $end
    $var wire  1 & M_RREADY $end
    $var wire  2 - M_RRESP [1:0] $end
    $var wire  1 $ M_RVALID $end
    $var wire 32 a M_WDATA [31:0] $end
    $var wire  1 ' M_WREADY $end
    $var wire  4 , M_WSTRB [3:0] $end
    $var wire  1 ) M_WVALID $end
    $var wire  1 Z START_READ $end
    $var wire  1 [ START_WRITE $end
    $var wire 32 ] W_data [31:0] $end
    $var wire 32 \ address [31:0] $end
    $var wire  3 2 next_state [2:0] $end
    $var wire  1 . read_start $end
    $var wire  3 1 state [2:0] $end
    $var wire  1 / write_addr $end
    $var wire  1 / write_data $end
    $var wire  1 0 write_start $end
   $upscope $end
   $scope module u_axi4_lite_slave0 $end
    $var wire  1 X ACLK $end
    $var wire 32 b ADDRESS [31:0] $end
    $var wire  1 Y ARESETN $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire 32 _ S_ARADDR [31:0] $end
    $var wire  1 # S_ARREADY $end
    $var wire  1 % S_ARVALID $end
    $var wire 32 ` S_AWADDR [31:0] $end
    $var wire  1 ' S_AWREADY $end
    $var wire  1 ) S_AWVALID $end
    $var wire  1 * S_BREADY $end
    $var wire  2 c S_BRESP [1:0] $end
    $var wire  1 ( S_BVALID $end
    $var wire 32 + S_RDATA [31:0] $end
    $var wire  1 & S_RREADY $end
    $var wire  2 - S_RRESP [1:0] $end
    $var wire  1 $ S_RVALID $end
    $var wire 32 a S_WDATA [31:0] $end
    $var wire  1 ' S_WREADY $end
    $var wire  4 , S_WSTRB [3:0] $end
    $var wire  1 ) S_WVALID $end
    $var wire 32 S addr [31:0] $end
    $var wire 32 W i [31:0] $end
    $var wire  3 V next_state [2:0] $end
    $var wire 32 b no_of_registers [31:0] $end
    $var wire 32 3 register(0) [31:0] $end
    $var wire 32 4 register(1) [31:0] $end
    $var wire 32 = register(10) [31:0] $end
    $var wire 32 > register(11) [31:0] $end
    $var wire 32 ? register(12) [31:0] $end
    $var wire 32 @ register(13) [31:0] $end
    $var wire 32 A register(14) [31:0] $end
    $var wire 32 B register(15) [31:0] $end
    $var wire 32 C register(16) [31:0] $end
    $var wire 32 D register(17) [31:0] $end
    $var wire 32 E register(18) [31:0] $end
    $var wire 32 F register(19) [31:0] $end
    $var wire 32 5 register(2) [31:0] $end
    $var wire 32 G register(20) [31:0] $end
    $var wire 32 H register(21) [31:0] $end
    $var wire 32 I register(22) [31:0] $end
    $var wire 32 J register(23) [31:0] $end
    $var wire 32 K register(24) [31:0] $end
    $var wire 32 L register(25) [31:0] $end
    $var wire 32 M register(26) [31:0] $end
    $var wire 32 N register(27) [31:0] $end
    $var wire 32 O register(28) [31:0] $end
    $var wire 32 P register(29) [31:0] $end
    $var wire 32 6 register(3) [31:0] $end
    $var wire 32 Q register(30) [31:0] $end
    $var wire 32 R register(31) [31:0] $end
    $var wire 32 7 register(4) [31:0] $end
    $var wire 32 8 register(5) [31:0] $end
    $var wire 32 9 register(6) [31:0] $end
    $var wire 32 : register(7) [31:0] $end
    $var wire 32 ; register(8) [31:0] $end
    $var wire 32 < register(9) [31:0] $end
    $var wire  3 U state [2:0] $end
    $var wire  1 / write_addr $end
    $var wire  1 T write_data $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
b00000000000000000000000000000000 +
b0000 ,
b00 -
0.
0/
00
b000 1
b000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
0T
b000 U
b000 V
b00000000000000000000000000000000 W
0X
0Y
0Z
0[
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000100000 b
b00 c
#1
b00000000000000000000000000100000 W
1X
#2
0X
#3
1X
#4
0X
#5
1X
1Y
#6
0X
#7
10
b001 2
1X
1[
b00000000000000000000000000000101 \
b00000000000000000000000000000100 ]
#8
0X
#9
1)
1*
b1111 ,
00
b001 1
b001 V
1X
0[
b00000000000000000000000000000101 `
b00000000000000000000000000000100 a
#10
0X
#11
1'
1/
b010 2
1T
b001 U
b010 V
1X
#12
0X
#13
0'
1(
0)
b0000 ,
0/
b010 1
b000 2
b00000000000000000000000000000100 8
0T
b010 U
b000 V
1X
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
#14
0X
#15
0(
0*
b000 1
b000 U
1X
#16
0X
#17
1X
#18
0X
#19
1X
#20
0X
#21
1.
b011 2
1X
1Z
#22
0X
#23
1%
1&
0.
b011 1
b011 V
1X
0Z
b00000000000000000000000000000101 _
#24
0X
#25
1#
b100 2
b011 U
b100 V
1X
#26
0X
#27
0#
1$
0%
b00000000000000000000000000000100 +
b100 1
b000 2
b00000000000000000000000000000101 S
b100 U
b000 V
1X
b00000000000000000000000000000100 ^
b00000000000000000000000000000000 _
#28
0X
#29
0$
0&
b00000000000000000000000000000000 +
b000 1
b000 U
1X
b00000000000000000000000000000000 ^
#30
0X
#31
1X
#32
0X
#33
1X
#34
0X
#35
1X
#36
0X
#37
1X
#38
0X
#39
1X
#40
0X
